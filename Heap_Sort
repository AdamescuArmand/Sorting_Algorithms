def heap_sort(arr):
n = len(arr)
# Build a max-heap from the array
for i in range(n // 2 - 1, -1, -1):
heapify(arr, n, i)
# Extract elements from the heap one by one
for i in range(n - 1, 0, -1):
# Swap the root element with the last element
arr[i], arr[0] = arr[0], arr[i]
# Heapify the reduced heap
heapify(arr, i, 0)
return arr
def heapify(arr, n, i):
largest = i
left = 2 * i + 1
right = 2 * i + 2
# Check if left child of the root exists and is greater than the root
if left < n and arr[left] > arr[largest]:
largest = left
# Check if right child of the root exists and is greater than the root
if right < n and arr[right] > arr[largest]:
largest = right

# If largest is not the root, swap the root with the largest
if largest != i:
arr[i], arr[largest] = arr[largest], arr[i]
# Recursively heapify the affected sub-tree
heapify(arr, n, largest)
